outer_loop:
    blt r4 r1
    brc_jump #12 
    mov r1 r2
    Addi r2 #2
    mov R2 R7
    mov r4 r2   
    Addi r2 #2
    mov r2 r4
    mov r7 r2
    inner_loop:
        blt r4 r2   l10
        brc_jump #11
        ld r0 r1
        ld r3 r2
        sign r0 
        sign r3
        beq r0 r3
        brc_jump #3
        blt r0 r3 
        brc_jump #2
        addi r2 #1
        ld r3 r2
        flip_bit r3
        addi r3 #1  
        subi r2 #1
        ld r0 r2
        flip_bit r0
        addi r0 #0
        mov r0 r5
        addi r1 #1  
        ld r0 r1 
        add r3 r0  
        mov r5 r0 
        mov r3 r5
        subi r1 #1
        ld r3 r1 
        add r0 r3
        mov r5 r3
        addi r2 #2
        jump #7


        left_neg:
            addi r1 #1
            ld r3 r1
            flip_bit r3
            addi r3 #1  
            subi r1 #1
            ld r0 r1
            flip_bit r0
            addi r0 #0 
            mov r0 r5
            addi r2 #1 
            ld r0 r2
            add r3 r0  
            mov r5 r0
            mov r3 r5 
            subi r2 #1
            ld r3 r2 
            add r0 r3 
            mov r5 r3
            addi r2 #2
            jump #7




        same_sign:
            ld r0 r1
            ld r3 r2
            beq r0 r3 
            brc_jump #4


            blt r3 r0
            brc_jump #6

            addi r2 #1
            add r1 #1
            ld r0 r1
            ld r3 r2
            sub r3 r0
            mov r3 r5
            subi r1 #1
            subi r2 #1
            ld r0 r1
            ld r3 r2
            sub r3 r0
            mov r3 r0
            mov r5 r3
            addi r2 #2
            jump #7
            
            equal:
                addi r1 #1
                addi r2 #1
                ld r0 r1
                ld r3 r2
                blt r3 r0
                brc_jump  #5
                rll:
                    sub r0 r3  
                    mov r0 r3
                    sub r0 r0 
                    addi r2 #1 
                    subi r1 #1  
                    jump #7


            compare_left_greater_right:
                addi r1 #1
                addi r2 #1
                ld r3 r2
                ld r0 r1
                sub r0 r3 
                mov r0 r5 
                subi r1 #1
                subi r2 #1
                ld r0 r1
                ld r3 r2
                sub r0 r3
                mov r5 r3
                addi r2 #2
                jump #7
    comp_min_max:
        mov r3 r7
        mov r4 r3
        addi r3 #3
        mov r3 r4
        mov r7 r3
        mov r3 r7
        mov r4 r3
        addi r3 #1
        ld r5 r3
        mov r3 r4
        mov r7 r3
        mov r3 r7
        mov r4 r3
        addi r3 #2
        mov r3 r4
        mov r7 r3 
        blt r5 r0
        brc_jump #9

        mov r3 r7
        mov r4 r3
        subi r3 #2
        mov r3 r4
        mov r7 r3 

  
        beq r5 r0
        brc_jump #8
        str r0 r4

        mov r3 r7
        mov r4 r3
        addi r3 #1
        mov r3 r4
        mov r7 r3
  
        str r3 r4
        mov r3 r7
        mov r4 r3
        addi r3 #1
        mov r3 r4
        mov r7 r3
        jump #9


        msb_equal:
            mov r3 r7
            mov r4 r3
            addi r3 #1
            mov r3 r4
            mov r7 r3

            mov r3 r7
            mov r4 r3
            ld r5 r3
            mov r3 r4
            mov r7 r3 


            mov r3 r7
            mov r4 r3
            addi r3 #1
            mov r3 r4
            mov r7 r3
            blt r5 r3
            brc_jump #9
            mov r3 r7
            mov r4 r3
            subi r3 #1
            mov r3 r4
            mov r7 r3
            str r3 r4
            mov r3 r7
            mov r4 r3
            addi r3 #1
            mov r3 r4
            mov r7 r3
            jump #1


        check_max:


            mov r3 r7
            mov r4 r3
            ld r5 r3
            mov r3 r4
            mov r7 r3 
            mov r3 r7
            mov r4 r3
            subi r3 #7
            subi r3 #1
            mov r3 r4
            mov r7 r3
            blt r0 r5
            brc_jump #9

            mov r3 r7
            mov r4 r3
            addi r3 #7
            addi r3 #1
            mov r3 r4
            mov r7 r3

            beq r5 r0
            brc_jump #8
            str r0 r4
            mov r3 r7
            mov r4 r3
            addi r3 #1
            mov r3 r4
            mov r7 r3
            str r3 r4

            mov r3 r7
            mov r4 r3
            subi r3 #7
            mov r3 r4
            mov r7 r3


            jump #1

            msb_equal:
                mov r3 r7
                mov r4 r3
                addi r3 #1
                mov r3 r4
                mov r7 r3
                mov r3 r7
                mov r4 r3
                ld r5 r3
                mov r3 r4
                mov r7 r3


                mov r3 r7
                mov r4 r3
                subi r3 #7
                subi r3 #2
                mov r3 r4
                mov r7 r3
                blt r3 r5
                brc_jump #1

                mov r3 r7
                mov r4 r3
                addi r3 #7
                addi r3 #2
                mov r3 r4
                mov r7 r3
                str r3 r4
                mov r3 r7
                mov r4 r3
                subi r3 #7
                subi r3 #2
                mov r3 r4
                mov r7 r3
                jump #1
    inner_end:
        addi r1 #2
        jump #0
outer_loop_end:
