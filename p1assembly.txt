Outer_loop:
	mov r6, r0
	add r0, r0
        beq R4 R0
        brc_jump #8
	brc_comp
	mov r4 r0
        Ld R2 R0
       
Inner_loop:
	mov r6, r0
	add r0, r0
        Beq r5, r0
        brc_jump #7
	brc_comp
	mov r5, r0
        ld R3, R0  
        
compare_pairs:
	Xor r3 r2
	cnt_bits r3 
	Mov r4 r0
	Mov r5 r1
	Addi r0, #1
	Addi r1, #1
	Ld r0, r0
	Ld r1, r1 
	Xor r0, r1
	Cnt_bits r0
	Add r0, r3
	Mov r0, r7
	Mov r6, r0
	Add r0, r0
	Mov r0, r1
	Addi r1, #1
	Ld r0, r0 
	Ld r1, r1 
	Blt r7, r0
    brc_jump #5
	brc_comp
	
Check_greater:
	Beq r1, r7  
    brc_jump #6
	blt r1, r7 
    brc_jump #6
	Mov r7, r0
	Mov r6, r3
	Add r3, r3
	Addi r3, #1
	str r0, r3
	jump #6
Update_min:
	Mov r7, r0
	Mov r6, r3
	Add r3, r3
	str r0, r3
	jump #4
inc_inner:
	mov r5 r0
	addi r0, #2
	mov r0 r5
	jump #2
inc_outer_loop:
	mov r4, r0
	addi r0, #2
	mov r0, r4
	addi r0, #2
	mov r0, r5
	jump #1
	
End_program:

