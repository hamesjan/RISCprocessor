	mov r6, r0 ## OUTERLOOP
	add r0, r0
    beq R4, R0, end_program
	brc_comp
	mov r4 r0
    Ld R2, R0         ; R2 = data[0] on first iteration
	mov r6, r0  ## INNERLOOP
	add r0, r0
    Beq r5, r0, inc_outer_loop
	brc_comp
	mov r5, r0
    Load R3, R0  [R3 = data[R0]
    Xor r3 r2 (r3 = XOR result) ## COMPAREPAIRS
	cnt_bits r3 
	Mov r4 r0
	Mov r5 r1
	Addi r0, 1
	Addi r1, 1
	Ld r0, r0 ;r0 = data[r4 + 1]
	Ld r1, r1 ;
	Xor r0, r1
	Cnt_bits r0
	Add r0, r3
	Mov r0, r7 (r7 has total HD between first two halfwords)
	Mov r6, r0
	Add r0, r0 (r0 = 64)
	Mov r0, r1
	Addi r1, 1
	Ld r0, r0 (r0 = data[64] current min)
	Ld r1, r1 (r1 = data[65]
	Blt r7, r0, update_min
	brc_comp
    Beq r1, r7  inc_inner ## CHECK GREATER
	brc_jmp
	blt r7, r1 inc_inner
	brc_jmp
	Mov r7, r0
	Mov r6, r3
	Add r3, r3
	Addi r3, 1
	str r0, r3
	J inc_inner
	Mov r7, r0 ## UPDATE MIN
	Mov r6, r3
	Add r3, r3
	str r0, r3
	J check_greater
	mov r5 r0 ## INC_INNER
	addi r0, 2
	mov r0 r5
	j inner_loop
	mov r4, r0 ## INC OUTER LOOP
	addi r0, 2
	mov r0, r4
	addi r0, 2
	mov r0, r5
	j outer_loop


	
End_program:
	done
